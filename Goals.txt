Here are my goals and what to expect:
I want to create an open source game engine.
the game engine will run in OpenGL, DirectX, Vulkan, New Direct X
The engine will be in two pieces, which I'll call the Vision Engine and the Action Engine.
The Action Engine handles Logic, physics, advanced animation (like animations that have environmental variables for bone locations), and the camera location, among other things.
The Vision Engine handles static level geometry, static lights, filters, and turning the current state of the Action Engine into visuals on the monitor. Multiple cameras will simply render to multiple layers.
Ambitions: For the default Action Engine, I want there to be no way to clip through surfaces. Probably by using Rays to scan for whether or not a verticy will go through a wall. There will also be multiple physics types. Such as points, wireframe, and solid. I also want the action engine to run at physics rates above 500tps on a low to mid-range processor, with 1000 active verticy-collision cubes on a ground plane. Also a tick is developer-defined and a standard unit of time. Basically, the speed of gravity will be defined in ticks, and so forth. If the computer runs too slowly, the developer should have an option to lower the TPS. also, with unexpected slowdowns, the if the Physics chug, only the physics should chug, allowing the Vision Engine to stay rendering at the frame rate it wants.
I want the Vision Engine to not only work with the Action Engine, but with any program a developer wants to write. The vision engine will not only have 2d filters, but 3d filters, if that makes any sense. I want it so that, if the frame rate drops, the Action Engine stays running at speed, so that the dropped frames are noticed less, and don't break high-intensity action. If it drops below a developer-designated rate, then the Action Engine will slow down to make sure that important details are kept. With the nature of the Action Engine, we will be able to do something extra cool. Sampled motion blur. Basically, Bools are drawn by samples taken from the Action Engine, as well as multiple render samples, and then stacked and curved-linear-blurred to produce the most natural motion blur. Almost as good as higher refresh rates. It will also be great if the Vision Engine is entirely, or mostly, run in the GPU.
I also want the engine able to directly import files from Blender.
These ambitions are far from a full list, and these ideas are far from complete.
This will be a learning experience for me, as I'm still a freshman in college.
